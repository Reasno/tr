// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

// Package grpc provides a gRPC client for the {{.Service.Name}} service.
package grpc

import (
	"context"
	"google.golang.org/grpc"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	"{{.ImportPath -}} /svc"
	pb "{{.PBImportPath -}}"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...grpctransport.ClientOption) (svc.Endpoints, error) {

	{{- with $te := .}}
		{{- with $pkgName := $te.PBPackageName}}
			{{- range $i := $te.Service.Methods}}
				var {{ToLower $i.Name}}Endpoint endpoint.Endpoint
				{
					{{ToLower $i.Name}}Endpoint = grpctransport.NewClient(
						conn,
						"{{$pkgName}}.{{$te.Service.Name}}",
						"{{$i.Name}}",
						EncodeGRPC{{$i.Name}}Request,
						DecodeGRPC{{$i.Name}}Response,
						pb.{{GoName $i.ResponseType.Name}}{},
						options...,
					).Endpoint()
				}
			{{end}}
		{{end}}
	{{end}}

	return svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}, nil
}

// GRPC Client Decode
{{range $i := .Service.Methods}}
// DecodeGRPC{{$i.Name}}Response is a transport/grpc.DecodeResponseFunc that converts a
// gRPC {{ToLower $i.Name}} reply to a user-domain {{ToLower $i.Name}} response. Primarily useful in a client.
func DecodeGRPC{{$i.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.{{GoName $i.ResponseType.Name}})
	return reply, nil
}
{{end}}

// GRPC Client Encode
{{range $i := .Service.Methods}}
// EncodeGRPC{{$i.Name}}Request is a transport/grpc.EncodeRequestFunc that converts a
// user-domain {{ToLower $i.Name}} request to a gRPC {{ToLower $i.Name}} request. Primarily useful in a client.
func EncodeGRPC{{$i.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.{{GoName $i.RequestType.Name}})
	return req, nil
}
{{end}}

