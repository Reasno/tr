// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/gen/client/grpc/client.gotemplate (2.187kB)
// NAME-service/gen/client/http/client.gotemplate (105B)
// NAME-service/gen/endpoints.gotemplate (4.609kB)
// NAME-service/gen/transport_grpc.gotemplate (2.962kB)
// NAME-service/gen/transport_http.gotemplate (106B)
// NAME-service/service.gotemplate (62B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xea\x38\x14\x5d\xc7\x5f\x71\x84\x58\xc0\x13\x75\xf6\x95\xde\xe6\xd1\xce\x53\xa5\x99\x16\x31\x68\xb6\x23\x93\x5c\x82\xd5\x60\xa7\xb6\x81\x41\x56\xfe\x7d\x64\x3b\xa1\xa1\x8f\xf2\xba\x68\x71\x7c\xcf\xbd\xbe\x3e\xe7\x5c\xe7\x39\xe6\xba\x24\x54\xa4\xc8\x08\x47\x25\xd6\x27\x38\xb3\xb7\x96\xe3\xe1\x05\xcf\x2f\x2b\x3c\x3e\x3c\xad\x38\xcb\x73\x2c\xc9\xec\x95\x92\xaa\x4a\x00\x1c\x65\x5d\x43\x1f\xc8\x1c\x8d\x74\x04\xb7\x95\x16\x1b\x59\x53\x04\xff\x43\xc6\x4a\xad\xee\xe1\x3d\xef\xd6\x6d\x3b\x08\xe0\x41\x38\x1a\x46\xc3\x77\xdb\xb2\x00\x59\x88\xe2\x55\x54\x84\xca\x34\x05\x1a\xa3\x0f\xb2\x24\x0b\x81\x6a\xb9\x98\xa3\xa8\x25\x29\x87\x8d\x36\x70\x5b\x0a\x05\xfe\x26\x73\x90\x05\xf1\x67\xb1\xa3\xb6\x85\xed\x3e\x59\x33\x28\xc3\x98\xdc\x35\xda\x38\x4c\x58\x36\x2a\xb4\x72\xf4\x9f\x1b\xb1\x6c\x54\x69\x5d\xd5\xc4\x2b\x5d\x0b\x55\x71\x6d\xaa\x3c\xa0\x47\x2c\x84\xa4\xdb\xee\xd7\xbc\xd0\xbb\xbc\xd2\x77\xaf\xd2\xe5\xe1\x8f\x54\xd9\x68\xa9\x42\x72\x40\x3a\x23\x94\x8d\x85\x3f\xc1\x9f\x01\xe7\xc2\x79\x8e\x55\xa0\xaa\x6b\x9b\x65\xf6\x50\x60\xe4\x3d\x7f\x8a\x1d\x2e\x84\xdb\xe2\xae\x6d\x91\x57\xa4\x46\x2c\x6b\xd6\x31\xb8\xf8\x71\x19\x1e\xb1\x69\xe4\xea\x99\x8e\x30\xe4\xf6\x46\x59\x08\xd5\x5f\x1e\x6b\x51\xbc\x26\x31\x2f\x69\x2b\xb4\x52\x54\x38\xa9\x15\xc7\x93\x83\xb4\x81\xc4\x50\xc7\x90\x6d\xb4\xb2\x72\x2d\x6b\xe9\x4e\xd0\x9b\xc8\x6e\x21\xea\x9a\x0c\x9c\x46\x29\x45\x3d\x83\x50\x25\x6a\xe1\xc8\xa0\xa8\xb5\xa5\x59\x02\xbd\xd7\x64\x9b\xbd\x2a\x42\x4f\x93\xb0\x89\x6f\xe1\xce\x7c\x1e\x8f\x9e\x6b\xa5\x66\xd0\x4d\xc0\x59\x70\xce\x2f\xe8\xeb\x40\x2f\x31\x3c\xc5\xc4\x1e\x0a\xfe\xd8\x51\x6d\x67\x20\x63\xb4\x99\xc2\x33\x96\x79\x7f\x87\xa3\x74\x5b\x8c\x1d\xe1\xfe\x3b\x78\xdb\xb2\x6c\xb0\xdb\xbc\x56\xc1\x08\x21\x34\x76\xc4\x17\x3f\x3a\x37\x25\x77\xb0\x2c\x61\x8d\x50\x15\x61\x2c\x7b\x58\xef\xa1\xbf\xc8\x6d\x75\x69\x13\x30\x3b\x08\x03\xef\x57\xfa\x4f\x7d\x24\x83\xb1\xec\x2c\xd6\x37\x86\xde\x0c\xe7\x56\x63\x96\x8f\xff\xb3\x5b\x89\xdf\x71\x79\xfb\x67\x3a\x26\x02\x26\x29\x37\x0b\xf4\xcd\xba\xf5\xc8\xfb\xfe\x56\x6d\xcb\xbd\x1f\xf6\x9b\x36\x47\x43\xa8\xfc\xb8\xf9\xa8\x0a\x5d\xd2\xcf\xe5\x62\x3e\x88\x2e\xe9\x6d\x4f\xd6\xf5\x98\x07\xba\x8a\x89\x9e\xa0\x1e\xd4\xac\xb9\xf7\x3f\x75\xa4\x77\x2c\x79\x1f\x5e\x9d\x9a\xbe\x11\xdf\xf6\xd8\x4e\x68\xce\x79\xb7\x33\x3d\x93\x34\x99\xc6\x9d\x4e\x0b\x52\x65\xa7\x60\xb7\xea\x17\x2c\x4b\xbe\xc6\x85\x17\x7c\x00\x0c\xd5\xfb\x28\x5d\x18\x8e\x58\xee\x17\xd6\xef\x01\xdc\x92\x73\xf6\x7e\x76\xd6\xce\xa0\x64\xcd\xd2\x7b\x14\x68\x41\xd2\x07\x89\x28\x76\xbb\x87\xf4\xd2\xdd\xe4\x34\x8c\x9e\xc0\xe5\xeb\xc0\x53\x46\x0f\xf9\x23\xcc\x92\xdb\x8a\x38\xb5\x07\x32\xce\x42\x84\xba\x71\x9e\xaf\xdc\x03\x86\x9a\xfa\x14\x86\x55\x60\x6f\xc9\xdc\x95\x7a\x27\xa4\xfa\x04\x9a\xce\xe0\x58\x18\xb9\x13\x46\xd6\xa7\x90\xb3\xd9\xd7\x90\x0a\xa2\x7b\x2e\xba\x79\xbe\x79\x91\xc9\xbf\xe8\xde\x53\x3e\x4f\xbf\xb3\x68\xee\x65\x6c\x46\x2a\x47\x66\x23\x0a\xf2\xed\x14\x93\xc1\xd7\x60\xa6\xb3\xd4\xf7\xfd\xf7\xf7\x3c\x3e\xf9\xf6\x7b\xb3\x4d\xcf\x0e\x89\x05\x7a\xc5\xce\xfe\xf9\xa0\x5c\x1a\x83\x2f\x29\x77\x6b\x62\xae\x0a\x97\x12\x3a\xc4\x67\xba\xfd\x5e\x93\x74\x40\x14\xf0\x86\xc8\x11\xf5\x25\xe1\x6e\xdd\xe3\x9a\x6e\x7d\x07\x5f\x54\xed\x2d\x30\xd8\xf7\x73\x45\xb1\x18\xf8\x44\xb0\xb7\x5f\xe4\xfa\x3f\x00\x00\xff\xff\x99\x39\x45\x94\x8b\x08\x00\x00")

func genClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientGrpcClientGotemplate,
		"gen/client/grpc/client.gotemplate",
	)
}

func genClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := genClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/grpc/client.gotemplate", size: 2187, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x4e, 0xff, 0x0, 0xac, 0x99, 0x6a, 0xc7, 0xdc, 0x39, 0x14, 0x77, 0x2e, 0x5f, 0xd5, 0xaa, 0x4a, 0x20, 0x30, 0x41, 0x78, 0x66, 0x88, 0x2a, 0x22, 0xf8, 0x96, 0x3b, 0xb1, 0xbc, 0xae, 0xc8}}
	return a, nil
}

var _genClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func genClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientHttpClientGotemplate,
		"gen/client/http/client.gotemplate",
	)
}

func genClientHttpClientGotemplate() (*asset, error) {
	bytes, err := genClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _genEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6f\xdc\xba\x11\x3e\x8b\x7f\xc5\x64\xe1\xc2\xbb\x81\x2c\xdf\x1d\xec\xa1\x4d\xdc\xd6\x40\xe2\x04\xb1\xdb\x1e\x82\x20\xe0\x4a\xb3\x2b\xc2\x14\xc9\x90\xd4\xfe\xa8\xa0\xff\xbd\x18\x52\xd2\x6a\xb3\xb2\xeb\xf7\x8e\x0f\xef\x60\xd8\x26\x87\xc3\x6f\xbe\x6f\x66\x38\xba\xbe\x86\xf7\xba\x40\xd8\xa0\x42\xcb\x3d\x16\xb0\x3a\x80\xb7\xb5\x73\x19\x7c\xf8\x0c\xf7\x9f\x1f\xe1\xf6\xc3\xdd\x63\xc6\xae\xaf\xe1\x2b\xda\x5a\x29\xa1\x36\xd1\x00\x76\x42\x4a\xd0\x5b\xb4\x3b\x2b\x3c\x82\x2f\x85\x83\xb5\x90\x18\x8c\xff\x8d\xd6\x09\xad\x6e\xa0\x69\xb2\xee\xef\xb6\x1d\x6d\xc0\x07\xee\x71\xbc\x4b\xff\xb7\x2d\x63\x86\xe7\x4f\x7c\x13\x10\x31\xb2\x7f\xec\xdd\x42\xae\x95\xe7\x42\x39\xa8\xd0\x97\xba\x70\xe0\x35\x54\xfc\x09\x41\xa8\x42\x6c\x45\x51\x73\x09\xa8\x0a\xa3\x85\xf2\x0e\xd6\x56\x57\xe0\xd0\x6e\x45\x8e\x2e\x25\x4f\x16\x7f\xd6\xe8\x3c\x70\x55\x80\x45\x67\xb4\x72\x08\xfe\x60\x30\x78\x22\x53\x0a\x42\x3b\x3c\x7a\x49\x81\x3b\xd8\xa1\x94\xf4\x1b\x55\xae\x0b\xb4\x8e\x1c\x90\xbf\x02\xbb\xff\xd7\xda\x76\x07\x83\xb7\x34\x2c\x70\x22\x67\x0d\xba\xb6\xe0\x6a\x63\xb4\x25\x72\xbd\xe5\xca\xd1\xdf\x74\x9d\xe0\x52\xfc\x97\x7b\xa1\x15\x79\x5b\x6b\x5b\x71\xef\x32\xc6\x44\x15\x2c\xe6\x2c\x99\xad\x2b\x3f\x63\xc9\x8c\x22\xc7\xbd\x9f\x31\x96\xcc\x36\xc2\x97\xf5\x2a\xcb\x75\x75\xbd\xd1\x57\x4f\xc2\x5f\xd3\x4f\x8f\x98\x4c\xcc\x0a\x66\x4d\x93\x7d\xf9\xdb\x5d\x70\xf4\x85\xfb\x12\xae\xda\x76\xc6\x16\x81\xd0\xdb\x81\xa2\x5c\x4b\x89\xb9\x77\x3d\x56\x5f\x8e\x42\x07\x5f\x72\x0f\xb9\xae\x0c\x05\xc6\x15\xf0\xa2\xe8\xf9\xcc\xe0\xce\x5f\x3a\x72\x56\x21\x57\x9e\xe8\x5b\x21\xd4\x0e\x0b\xe2\x89\x43\x89\xd2\xa0\x05\xe7\x6d\x9d\xfb\x94\xb6\xbb\xab\xa6\x6f\x12\xca\x6b\xe0\xe4\xce\x09\xb5\x91\x08\x86\x5b\x5e\xa1\x47\x4b\xa9\x44\xeb\x77\x0a\x78\x54\xc8\xa6\x20\xfc\xa5\xa3\xcb\xd6\xb5\x0c\x4c\xaf\x6b\x95\x13\x8b\x1d\x64\x85\x44\xb4\x06\x6d\x42\x46\x83\xa6\xb3\x06\xed\x55\x7f\x21\x39\x5c\x71\x27\x5c\x06\x7f\xd7\x16\x70\xcf\x2b\x23\x31\x85\x83\xae\xa1\x12\x9b\xd2\x83\xe1\x8e\x54\x1e\x51\x45\x00\x87\x8b\xe2\x3d\xc6\xea\xa2\xce\x31\xd0\xc0\x15\x94\xde\x9b\xec\x9f\x5c\x15\x92\x30\xee\x84\x2f\x01\x79\x5e\x76\xc9\x0a\xf3\xfe\xf6\x05\xec\x84\xc5\x02\x6a\x13\x9d\x3a\x83\xb9\x58\x8b\x1c\x0c\xf7\x65\x06\xf3\xbb\x80\x4f\x38\xf2\xbf\xe2\x2b\x79\x00\x0e\x95\x70\x3e\x26\x3a\x14\xe8\xc4\x46\xd1\x51\xa1\xb6\xfa\x09\x03\x95\x0f\x51\x96\xa1\x30\x02\x44\x3c\x15\x3b\x8a\x41\x2e\x7a\x26\xb3\xc5\x98\xdd\x5c\x0a\x54\xfe\x94\xdd\x91\x70\xc7\x1a\x93\x07\xaa\xc4\xe8\x0e\x8b\x97\x64\xa4\x6a\x88\x5c\x09\x62\xb8\xc2\x98\x56\x47\xbc\x42\x79\xb4\x6b\x4e\x09\x35\xad\x04\x39\x1b\x2e\x9b\xae\xf3\xda\xc5\x8e\xd4\x15\xd6\x75\xd0\xe1\x1e\x77\xef\xbb\x78\x72\x5d\xad\x84\x0a\x3c\x55\x1d\xc4\x91\xb0\x69\xd7\x0d\x7c\x6d\x15\x88\x90\xc9\x04\x30\xe7\x52\xa2\x8d\xc9\xdc\x81\xcd\x58\x08\xe7\x8c\xd0\x86\x35\x8d\xe5\x6a\x83\x70\x21\xe0\x66\x09\x59\x6f\xff\x29\x8a\xd1\xb6\x2c\x69\x9a\x0b\x91\xdd\xf3\x0a\xdb\xb6\x3f\x0f\x00\x43\x10\x59\xbf\xc8\x9a\xe6\x8a\x56\xdb\x96\xb5\x8c\x51\xba\xc1\x3d\xee\x86\x2b\xe7\x5d\xf9\x81\x59\x65\x4d\x33\x5c\x14\x1d\x3f\x04\x4d\x17\x23\x80\x0d\x63\xc9\x28\x05\xa0\xd0\x15\x17\x2a\x63\xc9\x96\x5b\xea\x2e\x2f\xe3\xa6\x96\xc1\x92\xa4\x69\x1e\xf5\x47\xbd\x43\x0b\xe7\x21\x2c\xe1\x13\x7f\xc2\x89\xe0\x7a\xa0\x0b\xba\x24\xc6\x93\x2c\x18\x4b\x8e\xaa\xdd\x2c\x8f\x40\x9b\x57\x43\x39\xbb\xe8\x86\x68\x7c\x01\x62\x3a\x02\xd0\x32\x96\x74\x42\x0f\x38\x88\xe6\x71\x95\xbc\x42\xcb\xa0\xca\x7c\x94\x08\x0b\x18\x01\x9b\xe7\x7e\x0f\x5d\xbb\xce\xde\xc7\xdf\x29\x15\xdd\xdb\xa0\xd9\x3f\x34\x99\x11\xce\xaf\xf1\x31\x7a\x3c\x98\x5e\xc0\x05\xcc\xcf\x8d\xe2\x2b\x35\xb2\x4a\x01\xad\xd5\x76\x01\x0d\x4b\x92\xfe\x15\x0b\x8b\x04\x18\xb3\x29\x35\x72\xbf\x27\x0c\x0b\x96\x24\x62\x1d\x4c\xdf\x2c\x41\x09\x19\x7c\xf4\x9c\x28\x21\x83\x1b\x96\x24\x2d\x1b\x56\xfb\x1b\xb2\xd7\x60\x5b\xa4\xe4\x85\x98\xee\x49\x27\x72\x29\x47\x4e\x18\x0e\xbd\xf1\xc2\x63\x60\x38\x96\xc7\x98\xf4\x0b\x8f\x53\xbc\x47\xe2\x9f\x4d\xb8\x58\x13\xe3\xb3\xa7\x65\x71\x56\x6b\x27\xc1\x93\xef\x69\xe9\xfa\xa1\x61\x68\x55\x0d\x09\x35\x8c\x0f\xa3\xe5\x28\xc2\x48\x1d\xf2\xfe\x93\x22\xea\x7c\x4c\x71\x78\x96\x04\xe1\xdc\x76\x10\xd4\x65\xbf\x24\x57\x40\x14\xad\x26\xb4\x9c\x52\x33\xea\x39\xec\x6c\x3b\x91\xe2\x72\x7b\x2c\x90\xb1\x66\xff\xb1\xdc\xfc\x55\xca\xdb\x7d\x8e\xc6\xc3\xce\x72\xe3\xe2\x6b\x36\xb0\xb7\x16\x28\x0b\x7a\xca\xbb\x36\x78\x6c\x3b\x41\xde\xf0\x0c\x4c\xcc\x27\xd9\x27\x51\x14\x12\x77\xdc\xc6\x31\xf1\x5f\xae\x1f\x1c\x69\x64\x32\x46\x1e\xa8\x9b\xd3\x0b\xe5\xc9\x79\x35\x58\x87\x27\x18\xb7\x68\x0f\x83\x94\x54\x56\xd4\xac\xfb\xa1\x84\xfc\x7d\x36\xf4\x40\xd3\x23\x95\x8e\xde\x88\x9c\x2b\x1a\x50\xe8\x59\xc7\x82\x8e\xad\x0e\xa0\x48\x83\x38\xb8\xe0\x3e\x97\x75\x81\x45\x9c\x19\x57\x48\x10\x28\x66\x83\x45\x76\xc6\xc6\xfc\x88\x29\x85\xd9\x83\xe7\xbe\x76\xb3\x14\x66\x5f\x84\xda\xcc\x16\xac\x6f\x0f\x6f\x47\xfd\xe1\xb9\xf3\x30\xc1\x4a\x7a\x44\x93\x65\x99\xf3\x56\xa8\x4d\x48\x27\xa1\xba\xe5\x9b\x25\x54\xdc\x7c\x8b\x5b\xdf\x23\xfd\x4d\xdb\x84\x06\x79\x05\xff\xaf\x7d\x25\xc9\x6c\x94\x51\xb3\x1b\x68\xda\xb4\x3b\x3a\xea\x93\xa4\xc6\x0f\x82\x12\xd2\x37\xb8\x1c\x60\x35\xb1\x8d\xfc\x48\x41\x3f\xd1\x76\x0f\xec\x1b\xee\xbf\xbf\x83\x37\xfa\x29\xa6\xa2\xe1\x4a\xe4\xf3\x75\xe5\xb3\x07\x63\x85\xf2\xeb\xf9\xec\xb6\x77\x31\x28\x78\xf9\x17\x77\x09\x85\x46\x07\x4a\x7b\xc0\xbd\x70\xfe\x1d\x38\xc4\xb1\xf0\x43\xee\xb8\x6c\xa3\x67\x04\x6a\xb1\xe8\x9a\x54\x81\x12\x3d\xce\x7b\x04\x61\xef\x18\x80\x50\xf9\x11\xfe\x40\xdf\xeb\x89\x12\xeb\xe0\x62\xb9\x84\x13\xca\xba\x4a\x9b\x6c\xb5\xb0\x1c\x21\x9f\x4f\x9a\x2c\xfa\xd2\x3b\xa1\x3c\x96\xdd\x47\xbe\x42\x89\xc5\x31\x1b\xe2\x37\xd6\x06\x7d\x9f\xbb\xe3\xc1\x39\xa6\xf0\xae\x44\x35\xec\xea\x51\xba\x76\xce\x62\xd6\xa5\xb1\xca\xba\x42\xa8\xa3\x31\xc4\x0f\x37\x1e\xbf\xfe\x44\x4e\xf3\xa3\x15\x79\x1c\xec\x47\x18\x4a\x91\x97\xe1\xa8\x43\x35\x05\xa1\x1b\x9a\xba\xd3\xfd\xc8\xa8\x6d\x37\x32\x9d\x47\x15\xda\x6d\x4c\xe0\xf4\xbc\x33\x4f\x34\x6b\xf6\x5c\x5c\xbf\xbb\x37\x9d\x81\x4a\xbb\x38\x03\xe3\x16\x73\x14\xdb\x38\x5c\x87\x10\x7f\xf9\x66\xc9\xe0\x01\x71\x70\x33\xf2\x12\x36\xfa\x99\x7f\xa8\x7b\x02\x4a\x19\x59\xa0\xe7\x42\x86\xf9\xbc\x2f\xa7\xf0\xe9\xd7\x7d\x57\x70\x29\xfc\x21\x7b\xa9\x85\x9c\xc4\x3e\xee\x24\xbf\x99\xd1\x3f\xfb\xcc\x1f\xa7\xcf\x9c\x1c\x4b\xa7\x87\xc0\xe7\xda\xce\xff\x02\x00\x00\xff\xff\xea\x8c\xe5\x23\x01\x12\x00\x00")

func genEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genEndpointsGotemplate,
		"gen/endpoints.gotemplate",
	)
}

func genEndpointsGotemplate() (*asset, error) {
	bytes, err := genEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/endpoints.gotemplate", size: 4609, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x28, 0x78, 0xac, 0x5, 0x3c, 0x60, 0x1a, 0xeb, 0x12, 0x1b, 0x3e, 0x5a, 0x94, 0x6c, 0xee, 0x8a, 0x6b, 0xd7, 0xde, 0x58, 0xf8, 0xb3, 0xd9, 0xfa, 0xfa, 0xeb, 0x24, 0x8, 0x98, 0x2c, 0x98}}
	return a, nil
}

var _genTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x28\x16\x56\xe1\xd0\x7b\x0e\x90\x4b\x93\x6e\x5b\xec\xe6\x03\x59\xa3\x7b\x28\x8a\x82\x96\xc6\x12\x61\x89\x54\x48\xca\x89\x97\xd0\x7f\x5f\x0c\xf5\x61\x39\x76\x1c\x1f\x0c\x58\xe4\xe3\xcc\x9b\xf7\x86\x23\xcd\xe7\x70\xad\x53\x84\x0c\x15\x1a\xe1\x30\x85\xe5\x16\x9c\xa9\xad\xe5\x70\x73\x0f\x77\xf7\x0b\xf8\x7c\xf3\x6d\xc1\xd9\x7c\x0e\x8f\x68\x6a\xa5\xa4\xca\x5a\x00\x3c\xcb\xa2\x00\xbd\x41\xf3\x6c\xa4\x43\x70\xb9\xb4\xb0\x92\x05\x06\xf0\x77\x34\x56\x6a\x75\x09\xde\xf3\xee\x7f\xd3\x8c\x36\xe0\x46\x38\x1c\xef\xd2\x73\xd3\x30\x56\x89\x64\x2d\xb2\xc0\x88\x11\x7e\xd1\x87\x85\xca\xe8\x8d\x4c\xd1\x82\x45\xb3\x41\x73\x61\x65\x8a\xb0\x94\x2a\x95\x2a\xb3\xb0\xd2\x06\x5c\x8e\x90\x3d\x3e\x5c\x83\x33\x42\xd9\x4a\x1b\x17\xb8\x7c\x73\x50\x3b\x59\xc8\xff\xd0\x06\xc8\xb0\x3b\xcf\x4c\x95\xf0\x7f\x42\x38\xce\x98\x2c\x69\x11\xa6\x2c\x9a\x28\x74\xf3\xdc\xb9\x6a\xc2\xa2\x49\xa2\x95\xc3\x17\x37\x61\x2c\x9a\x64\x5a\x67\x05\xf2\x4c\x17\x42\x65\x5c\x9b\x2c\x84\x98\x97\xe8\x44\x2a\x9c\x20\x0c\x2d\x0c\x19\x60\x92\x49\x97\xd7\x4b\x9e\xe8\x72\x9e\xe9\x8b\xb5\x74\x73\xfa\xed\x53\xa0\x63\x7d\xa9\xc4\x46\x26\xc8\xa2\x6a\x09\x13\xef\xf9\xc3\xa7\x6f\x81\xd6\x83\x70\x39\x5c\x34\xcd\x84\xc5\x41\x97\x5b\xb1\xc6\x2f\x8f\x0f\xd7\x2d\x7b\x28\xc5\x1a\x2d\x08\xb0\xe8\x40\xaf\x00\x55\x5a\x69\xa9\x9c\x05\xb1\x11\xb2\x10\xcb\x02\x41\xd0\x7e\x90\xc7\x7b\xde\xa5\xe1\x77\xa2\xc4\xa6\xe9\x25\x58\xd5\x2a\x79\x15\x79\xba\x0b\xf5\xb9\xff\x37\x03\x5d\x39\xa9\x95\x05\xce\xf9\x5e\xbd\x9d\x98\xf7\x61\x3b\x86\x6a\xc9\xdf\xc8\x05\x9e\x45\x76\x84\xb5\x70\x79\x05\x3f\x7e\xbe\x1d\xcc\xb3\x28\x3a\xb6\xfb\x09\x57\xda\xe0\xb4\x77\x60\xa1\xaf\x5b\xbb\xe2\x19\x8b\x9a\xd7\x39\xae\x40\x54\x15\xaa\x74\xba\xb7\x3c\x94\xc3\x39\x8f\x59\x64\xd0\xd5\x46\xc1\xef\x94\xad\xcd\xe1\x83\x3d\xde\xc3\x42\xff\xad\x9f\xd1\xc0\x5e\x49\xd0\x34\x2c\xf2\xde\x08\x95\x21\x7c\x90\x54\xc8\xb0\x7f\x8b\x2e\xd7\xa9\x25\x44\xe4\x7d\x7f\xfc\x83\xec\xb4\xb8\x84\xfd\x92\xee\xf0\xb9\x53\x9d\x45\x51\x34\x28\xcf\xbd\x1f\x8e\xf4\x26\xcc\x08\x71\x83\x89\x4e\x83\x59\x23\xc4\x23\x3e\xd5\x68\x5b\xc0\x67\x75\x14\x60\x2b\xad\x2c\x06\xc4\x9e\x12\x9c\x73\x5a\x24\xed\xbc\xbf\xa0\x2e\x22\xe6\x0d\x6b\x42\xcb\xed\x04\x01\x59\x56\x05\x96\x48\x5d\x41\x37\xca\xfb\x2f\x3a\x48\x71\xdc\x6b\xa9\x1c\x9a\x95\x48\x90\xb9\x6d\x85\xe3\x38\xd6\x99\x3a\x71\xe0\xd9\xfb\xfa\x1d\x91\x0f\xe0\x95\x7e\x5f\x85\x4a\x0b\x34\x6c\x47\xbe\x65\xde\x85\x09\x43\x62\x94\xdd\xe9\x5d\x21\xe7\xd7\xf0\x2e\xd5\x70\x8b\xa6\x16\x3e\xee\x52\xc5\xbb\xf0\x03\xfb\x69\xe2\x5e\xa0\x1b\x2e\xbc\xeb\xda\x19\x18\x7c\x82\x8f\xe1\xde\xec\xf0\x9d\xa3\x8b\x6d\xd5\x93\x8a\x61\x7a\x08\x6a\x5d\x1d\xa1\x66\x80\xc6\x68\x4a\xce\xa2\x5f\x14\xba\x0a\x2b\x44\x9b\x7a\xea\x40\xcf\xf6\x4a\x51\xb7\x10\xb7\xc0\x25\x66\x91\x5c\x85\x43\xbf\x5d\x81\x92\x05\x85\xea\x6f\x88\x92\x45\x88\x17\x2e\x5a\xb7\x66\xb0\xe2\xe7\x50\x8b\x67\x74\x9c\x35\xcc\xfb\xd6\x28\xb2\xa9\x93\xba\xed\xea\xf7\x75\x9e\xcf\xe1\xd4\x05\x00\x49\x03\xef\xd5\xb0\x6f\x0f\x74\x88\x3f\xc9\x28\x97\x0b\x47\x36\x6c\xd0\xd0\xb8\x0c\x8d\xde\x0e\xc9\xc3\x7e\x33\x5d\x64\xa7\x41\x40\x6d\xd1\x5c\xa4\xba\x14\x52\x9d\x02\x73\x78\x30\xb2\x14\x46\x16\x5b\x3a\xb2\xaa\x0b\x90\x2a\x4c\xea\xd1\xcc\x3d\x55\xc7\xf4\xd7\x61\x97\x50\x2d\x8f\xf8\xb4\xeb\x4a\x4f\x2d\x31\x7a\x1a\x5b\x4f\x2d\x75\x79\xd5\x9f\x39\x66\xcf\x41\x7b\x8d\xfc\x7c\x3a\xe1\x54\x3b\x5e\xce\x72\xea\xe4\x24\x3a\x6a\x55\x7b\xa2\x87\xbc\xe5\xd5\xfb\x2e\x74\x29\x82\x67\x27\x9c\xad\x8a\xed\x59\x56\x9d\x2c\xe4\x98\x57\x03\x83\x33\xcd\xb2\x15\xa9\xd8\x9f\x3a\xef\x36\x8d\xfc\xb2\xd5\x31\xc3\xbe\x62\x51\xa1\xb1\xac\xad\xe1\xe0\x6d\x79\x7c\x16\x95\xe9\x80\xe4\xb7\x37\xf1\x6b\x00\xd1\xa5\x89\xba\x9e\xc1\x26\x50\x0e\x4d\x50\xa6\x61\x46\xc8\x15\x6c\xc6\x33\xa3\xfd\xc0\x41\x58\xe3\x36\xb8\x9d\xa6\xf4\xb1\xa9\x5d\x4e\x12\xf7\x59\x68\x40\x97\xc2\xc1\x74\x1d\xc3\x73\x2e\x93\x3c\x40\x8b\x02\x0a\xb2\xab\x8b\x22\x54\x1a\x5e\x3a\xf4\x7d\xc6\xaf\x85\xd2\x4a\x26\xa2\xf8\x8a\x22\x45\xf3\x17\x6e\xe9\xf3\xc7\x75\x89\xac\x6e\x5b\x46\x3a\x48\x84\x82\x25\xf6\x21\x92\x04\xad\xc5\x94\x72\xa3\x74\x39\x9a\x2e\x33\xed\x93\x14\x57\x43\xad\xff\x4a\x97\x7f\x17\x45\x8d\xed\x48\xa4\x5a\x7f\xfc\xf1\x33\x7e\x17\xf8\x06\xbb\xe9\x3a\xde\x45\x08\xef\xd6\xc1\xba\xc4\xbd\xb0\x86\xfd\x1f\x00\x00\xff\xff\x68\x0e\xa5\x6b\x92\x0b\x00\x00")

func genTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_grpcGotemplate,
		"gen/transport_grpc.gotemplate",
	)
}

func genTransport_grpcGotemplate() (*asset, error) {
	bytes, err := genTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_grpc.gotemplate", size: 2962, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xd4, 0x5e, 0x2e, 0x36, 0xb9, 0xc6, 0x59, 0x6d, 0x2f, 0xd2, 0x52, 0x9b, 0xb1, 0x6f, 0xb4, 0xc, 0x9d, 0x28, 0xf8, 0x91, 0x91, 0xc, 0xc1, 0x2b, 0x92, 0xed, 0x18, 0xd8, 0xba, 0xb, 0x34}}
	return a, nil
}

var _genTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func genTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_httpGotemplate,
		"gen/transport_http.gotemplate",
	)
}

func genTransport_httpGotemplate() (*asset, error) {
	bytes, err := genTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

var _serviceGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func serviceGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceGotemplate,
		"service.gotemplate",
	)
}

func serviceGotemplate() (*asset, error) {
	bytes, err := serviceGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/client/grpc/client.gotemplate": genClientGrpcClientGotemplate,
	"gen/client/http/client.gotemplate": genClientHttpClientGotemplate,
	"gen/endpoints.gotemplate":          genEndpointsGotemplate,
	"gen/transport_grpc.gotemplate":     genTransport_grpcGotemplate,
	"gen/transport_http.gotemplate":     genTransport_httpGotemplate,
	"service.gotemplate":                serviceGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gen": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{genClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{genClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate":      &bintree{genEndpointsGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": &bintree{genTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{genTransport_httpGotemplate, map[string]*bintree{}},
	}},
	"service.gotemplate": &bintree{serviceGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
