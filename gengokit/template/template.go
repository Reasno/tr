// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/gen/client/grpc/client.gotemplate (3.303kB)
// NAME-service/gen/client/http/client.gotemplate (107B)
// NAME-service/gen/endpoints.gotemplate (4.753kB)
// NAME-service/gen/transport_grpc.gotemplate (3.243kB)
// NAME-service/gen/transport_http.gotemplate (108B)
// NAME-service/service.gotemplate (63B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xcd\x6e\xdb\x38\x10\x3e\x5b\x80\xde\x61\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x48\x26\x2c\x93\x2a\x49\xdb\x31\x04\xbd\xfb\x82\x7f\xb6\x94\x38\x6e\x0f\x86\x45\xce\xc7\xf9\xfb\x66\x38\x9c\xcd\x60\x21\x4b\x84\x1a\x05\x2a\x6a\xb0\x84\xa7\x03\x18\xb5\xd5\x9a\xc0\xdd\x67\xb8\xff\xfc\x08\xef\xef\x3e\x3e\x92\x34\x99\xcd\xe0\x01\xd5\x56\x08\x2e\x6a\x8f\x80\x3d\x6f\x1a\x90\x3b\x54\x7b\xc5\x0d\x82\x59\x71\x0d\x15\x6f\xd0\xa3\xbf\xa2\xd2\x5c\x8a\x5b\xe8\x3a\x12\xbe\xfb\x7e\x28\x81\x3b\x6a\x70\x28\xb6\x6b\x0b\x71\xa0\x25\x65\x6b\x5a\x23\xd4\xaa\x65\xd0\x2a\xb9\xe3\x25\x6a\xa0\x50\x3f\x2c\x17\xc0\x1a\x8e\xc2\x40\x25\x15\x98\x15\x5a\x15\x5f\x50\xed\x38\x43\x72\x4f\x37\xd8\xf7\xa0\xc3\x32\x4d\xda\x81\x1e\xab\x9a\x6f\x5a\xa9\x0c\x64\x69\x32\x99\x32\x29\x0c\x3e\x9b\xa9\xfd\xae\xa5\xac\x1b\x24\xb5\x6c\xa8\xa8\x89\x54\xf5\xcc\x9e\xb8\x20\x9a\x6d\xd0\xd0\x92\x1a\xea\x31\xdc\xac\xb6\x4f\x84\xc9\xcd\xac\x5d\xd7\x33\x54\x4a\x2a\x3d\xb5\x06\x47\xb2\x5a\xde\xac\xb9\x99\xd9\x1f\x8a\xb2\x95\x5c\x38\xeb\x56\x9f\x51\x54\x68\xe7\xdb\x1b\x07\x8e\x80\xe8\x59\x9a\x4c\x66\x33\x78\xb4\x69\x0f\xe1\xa7\xc9\x44\xef\x18\x4c\xbb\x8e\x7c\x74\x71\x2e\xa9\x59\xc1\x4d\xdf\xc3\xac\x46\x61\x2d\xb5\x4f\x4e\xba\x7c\x37\x96\x4f\xd3\x24\x0f\x89\xbf\xc7\x3d\x28\x34\x5b\x25\x34\x50\x11\x33\x09\x4f\x94\xad\x7d\x79\x8c\x39\x60\x52\x08\x64\x86\x4b\x41\xe0\xa3\x01\xae\x2d\x23\x4e\x91\x42\xdd\x4a\xa1\xf9\x13\x6f\xb8\x39\x80\xac\x1c\x57\x8c\x36\x0d\x2a\x30\x12\x4a\x4e\x9b\x02\xa8\x28\xa1\xa1\x06\x15\xb0\x46\x6a\x2c\x3c\xe8\xa4\x34\x4d\xaa\xad\x60\xd6\xab\xcc\xee\xc2\xb5\x0d\x9e\x2c\x9c\xf1\x85\x14\xa2\x00\xd9\x5a\xa0\x06\x42\xc2\xf6\x67\xb7\x91\x43\xd6\x3e\x91\x57\xa5\x61\x57\xa8\x0a\x70\x0c\xe5\xd0\xa5\xc9\x64\x47\x15\x30\x16\x02\x5a\x48\x51\xf1\xda\x25\xd7\x96\xd7\x8f\x02\x2a\xb8\x9d\x83\xa2\xa2\xc6\xa3\x29\x7b\x6a\x82\x4a\x59\x49\x95\xfd\xc9\x58\x6e\x37\x78\x65\xb5\xc2\x1f\x73\x10\xbc\xf1\x98\x89\xcf\xa4\xdd\x08\x26\x35\xf9\x4f\xd1\x36\x43\xa5\x0a\x98\x32\x2a\x84\x34\x40\xdb\xb6\x39\x04\xe5\x53\xa7\xaa\x4f\x93\x89\xeb\x84\x09\x1b\x84\xa4\xad\xbd\x6f\xdf\x47\xd5\x32\x8a\xd9\xd9\x3c\x27\x7e\x87\x95\x54\x98\x39\x97\x42\xd5\x7f\xa5\xcd\x16\xf5\xa3\xfc\xf0\xb0\x5c\x7c\x0a\xa5\x9c\x31\x46\x56\x48\x4b\x54\x3a\xcf\x0b\xef\xc3\xa4\xeb\x6e\x60\xcf\xcd\x0a\xae\x0c\x5a\x07\x88\xed\xd1\xc9\x60\xbb\x5d\xd7\x36\xb7\x56\x76\x65\x90\x84\xce\xf5\xe9\x76\x16\x2d\xd4\x27\xf0\x8a\x47\x54\x64\xe5\x13\x9a\x95\x2c\x75\x40\x3a\x2e\xba\xee\x51\xfe\x2b\xf7\xa8\xe0\x8a\x07\xd6\xde\x87\x66\x81\xd8\x35\x24\xee\xf8\x63\x3e\xd9\xd6\xd2\xdb\x47\xe7\x30\xce\xcc\x3d\xee\x7d\x72\xb2\x70\xd8\x66\x46\x14\x71\x31\xed\xba\x18\x59\xdf\x93\xae\x1b\x3a\xed\x37\xa7\x23\x2c\x7f\xb5\xfb\x5e\x30\x59\xa2\xcd\xef\x40\xfc\x80\x3f\xb7\xa8\xcd\x11\x74\x87\x67\x41\xae\x75\xf0\x88\x72\x95\xfc\x41\xba\x34\x5f\x71\x12\xe5\x8f\x87\x36\x3a\xd3\xf5\x47\xf0\xa8\x64\x08\x21\x51\x90\x1f\x93\x96\xe5\x7e\x2b\xd2\x83\xa2\x8c\xa4\xc6\xcf\xe3\x57\x9a\xc4\x22\xd6\x3b\x76\xd4\xa0\x3b\x87\x19\xb2\xfa\x92\x52\x7b\xaf\x78\x9d\xaf\xb8\xb8\x05\x80\x4b\x34\x17\x43\x07\x26\x7d\x61\xfb\x27\x4d\xe2\x68\xb0\xc9\x02\x4f\x1d\xf8\xf4\xa5\xc9\x65\x57\xc2\xe0\xb9\x98\x6b\x7b\x75\x51\x18\x5f\xb2\xc4\x9f\x88\x90\xbf\xed\x4d\x64\x56\xd4\xdd\x7a\x3b\x54\x46\x03\x75\x8a\xdd\x85\x78\x26\x1e\x50\x68\x3b\xdb\x48\xa0\xb0\xd5\xa8\x6e\x4a\xb9\xa1\x5c\xbc\x01\xf5\x46\x08\x2c\x15\xdf\x50\xc5\x9b\x83\x3d\x53\x6d\x1b\xe0\x02\x68\xb8\x9e\xe2\x7d\x78\x31\x94\xec\x07\x84\x26\x27\x0b\xff\x5f\xb8\xda\x7f\x70\xde\x70\x61\x50\x55\x94\x61\xd7\xe7\x90\x0d\x56\xa3\x4b\xd1\x7b\x7e\x3b\x3f\x1d\x24\xd9\xf5\xaf\xcb\x30\x3f\x95\x8b\xd3\x70\xa2\x6e\x50\x50\x2f\x38\xf4\x7d\xf2\x9b\x1c\x5e\x6a\xaa\xb3\x14\xfa\x03\x01\xf1\x26\x83\xbf\x66\xc7\x5b\x70\x54\x5e\xa0\xdb\xa1\x7e\x8f\xc2\x4b\x91\x9c\x63\x30\xba\xf0\xbb\xfc\xfd\x74\x73\x2b\x78\x74\x86\x3b\x27\x78\x8b\xba\x9f\x67\x89\x4b\x13\x73\x68\x71\x34\x29\x41\x1b\xb5\x65\xc6\xd9\x0c\xa3\x03\xbe\x7d\xd7\x46\x71\x51\x9f\x5a\x76\x38\xa4\x3c\x4b\x36\x05\x6e\xe5\xd8\xd8\xc8\x92\x57\x1c\xb5\x9f\xfe\xc7\x97\x85\x9b\xc4\xce\xe4\x48\x81\x3d\x9b\x5d\x0f\xbd\xc8\x7d\xe8\xd6\x9a\xcb\xed\xc2\x3c\xc7\xf9\xf6\x05\x45\x99\xad\xf1\xe0\x1e\x08\xde\xaf\x7c\xac\xae\x3b\x05\xee\x34\x4b\x38\xa7\xdb\x0f\x74\x19\xe7\x23\xcc\xc1\x2a\xb5\x7b\xa7\x19\xef\x27\x66\x7f\x74\xe3\xd2\xa8\x75\x2e\xc5\x4c\xe5\x70\x6e\x6a\x0f\x8b\xf6\xa5\x93\xcc\x3c\xbf\x2e\x91\x4d\x09\xd7\xf1\x59\x4a\x3e\xdd\xe5\x2f\x11\x3e\x06\x3b\x63\x5b\xca\x47\x44\x4d\xe2\x6b\x67\x7d\x7a\xed\x38\x0f\xfd\x64\xe5\x15\xec\x0a\x90\x4e\xc8\xcc\x33\x71\x11\x65\xeb\x9c\x64\xc1\xff\xbf\xac\x30\x4c\x61\xaf\x7b\x6e\x9f\x35\x36\xf7\x6e\x59\xc0\xba\x80\x9d\x1f\x3b\x7d\x78\xe1\x84\x37\x93\x87\x8f\x5e\x4d\xd7\x9b\x12\xe6\x70\x8c\xe4\x1f\xc9\x45\x76\xbd\x29\x8b\xd3\xd6\xd2\x1e\xf2\xaa\x09\x21\x79\x3e\x50\x19\xb2\xc4\xcc\xf3\x91\x8e\xff\x03\x00\x00\xff\xff\x49\x70\x30\x7b\xe7\x0c\x00\x00")

func genClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientGrpcClientGotemplate,
		"gen/client/grpc/client.gotemplate",
	)
}

func genClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := genClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/grpc/client.gotemplate", size: 3303, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xb1, 0x50, 0xf6, 0x3b, 0xd5, 0x1a, 0x42, 0x28, 0x26, 0x44, 0x9c, 0x4a, 0xb1, 0x13, 0x1, 0x6f, 0x4e, 0xd1, 0x5f, 0xe, 0x2f, 0xb9, 0x33, 0x51, 0x53, 0x9a, 0x6d, 0xce, 0x52, 0x78, 0x94}}
	return a, nil
}

var _genClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func genClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientHttpClientGotemplate,
		"gen/client/http/client.gotemplate",
	)
}

func genClientHttpClientGotemplate() (*asset, error) {
	bytes, err := genClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _genEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4f\x6f\x1b\xb7\x13\x3d\x4b\x80\xbe\xc3\x44\xf0\x0f\x96\x82\x35\x75\x77\xa0\xc3\xaf\x89\xdb\x1a\x48\x9c\x20\x76\xdb\x43\x10\x04\xd4\xee\x48\x22\xcc\x25\x19\x92\xab\x3f\x5d\xe8\xbb\x17\x43\x72\x57\x2b\x6b\xe3\x26\x3d\x16\x3d\x08\x92\x96\xe4\xf0\xcd\x7b\x33\x8f\xdc\xd9\x0c\x5e\xeb\x02\x61\x85\x0a\x2d\xf7\x58\xc0\x62\x0f\xde\x56\xce\x31\x78\xf3\x1e\xee\xde\x3f\xc0\xcd\x9b\xdb\x07\x36\x1a\xce\x66\xf0\x11\x6d\xa5\x94\x50\xab\x38\x03\xb6\x42\x4a\xd0\x1b\xb4\x5b\x2b\x3c\x82\x5f\x0b\x07\x4b\x21\x31\xce\xfe\x1d\xad\x13\x5a\x5d\x43\x5d\xb3\xf4\xfb\x70\xe8\x8e\xc0\x1b\xee\xb1\x3b\x4c\xff\x69\xca\x68\x68\x78\xfe\xc8\x57\x01\x16\xfd\x9d\xcd\xe0\xa1\x09\x0e\xb9\x56\x9e\x0b\xe5\xa0\x44\xbf\xd6\x85\x03\xaf\xa1\xe4\x8f\x08\x42\x15\x62\x23\x8a\x8a\x4b\x40\x55\x18\x2d\x94\x77\xb0\xb4\xba\x04\x87\x76\x23\x72\x74\x59\x08\x65\xf1\x6b\x85\xce\x03\x57\x05\x58\x74\x46\x2b\x87\xe0\xf7\x06\x43\x28\x9a\x4b\xb9\x68\x87\xc7\x30\x19\x70\x07\x5b\x94\x92\xbe\x51\xe5\xba\x40\xeb\x28\x40\x08\x58\x60\x7a\xb0\xd4\x36\xad\x0c\xe1\xb2\xf0\x80\x13\x49\x4b\xd0\x95\x05\x57\x19\xa3\x2d\xb1\xec\x2d\x57\x8e\x7e\xd3\x7e\x82\x4b\xf1\x27\xf7\x42\xab\x10\x6e\xa9\x6d\xc9\xbd\x63\x94\xb9\x28\xc3\xa4\xc9\x68\x38\x18\x2f\x4b\x3f\xa6\x6f\x22\x00\x77\xf4\x9b\xfe\xad\x84\x5f\x57\x0b\x96\xeb\x72\xb6\xd2\x57\x8f\xc2\xcf\xe8\xd3\x20\x8f\x93\xcc\x02\xc6\x75\xcd\x3e\xfc\x74\x1b\xc2\x7d\xe0\x7e\x0d\x57\x87\xc3\x78\x34\x9c\x26\x7a\x6f\x5a\xc2\x72\x2d\x25\xe6\xde\x35\xb8\xfd\xba\xc3\x03\xf8\x35\xf7\x90\xeb\xd2\x50\x92\x5c\x01\x2f\x8a\x86\x5d\x06\xb7\xfe\xd2\x85\x68\x25\x72\xe5\x89\xcc\x05\x42\xe5\xb0\x20\xd6\x38\xac\x51\x1a\xb4\xe0\xbc\xad\x72\x9f\xd1\x70\xda\xab\x7f\x2b\xa1\xbc\x06\x1e\xe2\x39\xa1\x56\x12\xc1\x70\xcb\x4b\xf4\x68\x43\x81\x85\x91\x5b\x05\x3c\x4a\x66\x33\x10\xfe\xd2\xd1\x7e\xcb\x4a\x06\xe6\x97\x95\xca\x89\xd5\x04\x5b\x21\x11\xaf\x41\x9b\x50\xea\xa0\x69\xad\x41\x7b\xd5\xec\x19\x22\x2e\xb8\x13\x8e\xc1\xcf\xda\x02\xee\x78\x69\x24\x66\xb0\xd7\x15\x94\x62\xb5\xf6\x60\xb8\x23\xdd\x3b\x7c\x11\xc8\x76\xa7\xb8\x91\xb1\xba\xa8\x72\x8c\x5c\x70\x05\x6b\xef\x0d\xfb\x95\xab\x42\x12\xca\xad\xf0\x6b\x40\x9e\xaf\x53\x01\xc3\xa4\xd9\x7f\x0a\x5b\x61\xb1\x80\xca\xc4\xa8\xce\x60\x2e\x96\x22\x07\xc3\xfd\x9a\xc1\xe4\x36\x22\x14\x8e\x76\x58\xf0\x85\xdc\x03\x87\x52\x38\x1f\xab\x1f\x0a\x74\x62\xa5\x68\xad\x50\x1b\xfd\x88\x81\xd0\xfb\xa8\x4e\xdb\x2d\x01\x24\x3e\x11\x3d\x6a\x42\x31\x1a\x36\xd9\xf4\x94\xe3\x5c\x0a\x54\xfe\x94\xe3\x8e\x82\xc7\xde\x93\x7b\xea\xd0\x18\x10\x8b\x67\xf5\xa4\x26\x89\x8c\x09\xe2\xb9\xc4\x58\x61\x47\xcc\x42\x79\xb4\x4b\x4e\xb5\xd5\xaf\x47\x88\xd6\x6e\xd7\xef\x00\x95\x8b\x8e\x95\x1a\x6e\x16\xd4\xb8\xc3\xed\xeb\x94\x51\xae\xcb\x85\x50\x81\xac\x32\x81\xec\xe8\x9b\x25\x9b\xf0\x95\x55\x20\x42\x51\x13\xc2\x9c\x4b\x89\x36\xd6\x75\x42\xcb\x46\xc3\x90\xd0\x19\xab\xf5\x68\x58\xd7\x96\xab\x15\xc2\x85\x80\xeb\x39\xb0\x66\xc5\xbb\xa8\x09\x79\xde\xa0\xae\x2f\x04\xbb\xe3\x25\x1e\x0e\x4d\x04\x00\x68\xf3\x60\x37\x6d\x91\xd6\xf5\x15\x3d\xa6\x55\xc1\x2c\xa9\xf8\xe0\x0e\xb7\xed\xc6\x93\xd4\x91\x60\x16\xac\xae\xdb\xdd\x62\xf0\xfb\x20\xef\xb4\x03\xb3\x0e\x1e\xd1\xa9\x07\x28\x74\xc9\x85\x62\xa3\xe1\x60\xc3\x6d\x30\x9f\xe7\x13\x20\x33\x19\x0d\x07\x83\xba\x7e\xd0\x6f\xf5\x16\x2d\x9c\xe7\x32\x87\x77\xfc\x11\x7b\xb2\x6c\xd0\x4e\xc3\x36\x29\xb1\x41\x30\xa6\xc1\x51\xc5\xeb\xf9\x11\x71\xfd\x03\x80\xce\xb6\xbb\x26\x56\x9f\x01\x9a\x9d\xc0\x08\x04\x0f\x92\xfc\x2d\x9a\x44\x7c\xb7\x85\xbe\x4b\xe3\xa0\xd4\xa4\x53\x22\x53\xe8\x20\x9c\xe4\x7e\x07\xc9\xdc\xd9\xeb\xf8\x9d\x51\x4f\xbe\x0c\x3a\xfe\xa2\x69\x1a\x01\xfe\x18\x0f\xb0\x87\xbd\x69\x44\x9d\xc2\xe4\x7c\x52\x3c\xd9\x3a\xb3\x32\x40\x6b\xb5\x9d\x92\xe2\x83\x41\x73\xf4\x85\xa7\x04\x19\x59\x9f\x3a\xb9\xdf\x11\x08\x52\x67\x20\x96\x61\xee\x8b\x39\x28\x21\x63\x94\x86\x1b\x25\x64\x08\x44\xcf\x0e\x31\x7c\x78\xde\xec\xc2\xbe\x07\xe0\x34\xa3\x38\x91\xf6\x56\x83\xc0\x33\xd5\xce\x29\xd9\xc1\x46\x2f\x3c\x06\xb2\x53\x07\x75\x05\xb8\xf0\xd8\xab\x41\x14\xe1\x9b\xb5\x18\x7b\xa6\xbb\xf8\xb4\x6d\xce\xfa\xf1\x94\x06\x0a\xde\xaf\x63\x73\xeb\x68\x3d\xad\x26\xd5\xda\xfb\x47\xe7\x71\x14\xa4\x2b\x15\x85\xff\x4a\x49\xa5\x20\x7d\x64\x9e\x95\x44\x5c\xb8\x69\xe5\x75\xec\x49\xad\x05\x4c\x69\x5a\x9f\xb2\xbd\xda\x26\x75\xdb\xb1\x4d\x23\x59\x1a\x38\x74\xdb\xe7\x54\xc3\x3f\x2c\x37\xff\x97\xf2\x66\x97\xa3\xf1\xb0\xb5\xdc\xb8\x78\x0e\xb6\x54\x2e\x05\xca\x82\x6e\x02\xc9\x39\x8f\x1e\x15\xd4\x8e\x87\x47\xcf\x2d\x87\xbd\x13\x45\x21\x71\xcb\x6d\xba\x7b\xfe\xe6\x9a\xeb\x28\x5d\xc0\x8c\x91\x7b\x3a\x03\xe8\x6c\xf3\x14\xbe\x6c\xa7\x87\xf3\x1b\x37\x68\xf7\xad\xb2\xd4\x71\x64\xf1\xae\xb5\xf5\xd9\x0c\xde\x1b\x3a\xde\xe9\x74\xcb\x3a\x47\x4b\xce\x15\x5d\x71\xe8\x52\x80\x05\xad\x5b\xec\x41\x91\x22\xf1\xea\x83\xbb\x5c\x56\x05\x16\xf1\x12\xba\x40\xc2\x40\x69\x1b\x2c\xd8\x39\x23\x93\x23\xaa\x0c\xc6\xf7\x9e\xfb\xca\x8d\x33\x18\x7f\x10\x6a\x35\x9e\x26\x9b\x9f\x20\xbc\xec\xb8\xc7\xb7\x02\x40\x0f\x33\xd9\x11\x0f\x63\xcc\x79\x2b\xd4\x2a\xd6\x97\x50\xe9\xf9\xf5\x1c\x4a\x6e\x3e\xc5\xb1\xcf\x51\x84\xfa\x50\x47\x27\xbd\x82\xbf\xf5\xb7\xc1\x60\xdc\xa9\xb1\xf1\x35\xd4\x87\xac\x59\x7c\xea\xa8\xa4\xcb\x17\x42\x14\xaa\x3a\xc4\x6d\xd1\xd5\xc9\x6a\xbe\x64\xa0\x1f\x69\xbc\xc1\xf7\x09\x77\x9f\x5f\xc1\x0b\xfd\x98\x0a\xd4\x70\x25\xf2\xc9\xb2\xf4\xec\xde\x58\xa1\xfc\x72\x32\xbe\x69\x82\xb4\x6a\x5e\xfe\xcf\x5d\x42\xa1\xd1\x81\xd2\x1e\x70\x27\x9c\x7f\x05\x0e\xb1\x5b\x04\x6d\x21\x39\xb6\xd2\x63\x82\x35\x9d\xb6\x46\x56\xa0\x44\x8f\x93\x06\x44\x18\x3d\xc9\x43\xa8\xfc\x98\x45\xcb\xe5\x8f\xb0\x26\x96\x21\xc8\x7c\x0e\x27\xfc\x35\x7d\xd8\x6b\xcc\x30\xef\x64\x30\xe9\x9d\x32\x3d\xb6\xe5\x13\x05\x9a\x96\x7c\xcb\x17\x28\xb1\x38\x16\x49\x7c\xa7\x5b\xa1\x6f\x8a\xba\x7b\x27\x8f\xb5\xbd\x5d\xa3\x6a\x47\x75\xb7\x8e\x53\xb4\x58\x8d\x59\x6c\xc0\xd4\x22\x55\x9c\x0d\xf1\x4d\x91\xc7\xf7\x4d\x91\xd3\xad\xd4\x8a\x3c\xbd\x35\x74\x50\xac\x45\xbe\x0e\x6b\x1d\xaa\x3e\x10\xe9\x1a\x96\x96\x37\xd7\x50\x6d\x9b\x4b\xd8\x79\x62\xc1\x99\x63\x65\x67\xe7\x2e\xde\x63\xec\xa7\xae\x75\x92\xdb\x3f\x37\xaf\x33\x5c\x59\xca\x35\xf0\x6e\x31\x47\xb1\x89\xf7\xf6\x90\xe6\x93\x97\x22\x06\xf7\x88\xc7\x38\x9d\x30\x61\xa4\x79\xa1\x68\x5d\x81\xa0\x52\x85\x16\xe8\xb9\x90\xe1\xee\xdf\x74\x59\x7c\xd3\x4c\xaf\x2d\x5c\x0a\xbf\x67\xcf\x5a\xcc\x49\xfe\x5d\xa7\xf9\x61\x5e\xff\xf3\xa1\x7f\xb1\x0f\x9d\xac\xcb\xfa\xaf\x94\xcf\xda\xd2\x5f\x01\x00\x00\xff\xff\x90\x5f\xb5\x4e\x91\x12\x00\x00")

func genEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genEndpointsGotemplate,
		"gen/endpoints.gotemplate",
	)
}

func genEndpointsGotemplate() (*asset, error) {
	bytes, err := genEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/endpoints.gotemplate", size: 4753, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x72, 0x44, 0xec, 0xff, 0x6d, 0x48, 0x1d, 0x1d, 0xcc, 0x41, 0x68, 0x7e, 0x6c, 0x40, 0x96, 0x20, 0x7, 0xea, 0x63, 0x12, 0xcc, 0x8b, 0x4d, 0xb3, 0x13, 0x79, 0x84, 0x47, 0xd1, 0x95, 0xbb}}
	return a, nil
}

var _genTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5f\x6f\xe2\xb8\x17\x7d\x06\x89\xef\x70\x7f\x68\xf4\x13\x19\x51\x67\x9f\x2b\xf5\x65\xa0\xd3\x56\xb3\x6d\x11\xcb\xcc\x3e\x8c\x46\x23\x93\x5c\x12\x8b\xc4\x4e\x6d\x03\x65\x23\xbe\xfb\xea\x3a\x4e\x08\x85\x52\xf6\xa1\x15\xb1\x8f\xcf\xfd\x73\x8e\x6f\x12\x86\x30\x52\x31\x42\x82\x12\x35\xb7\x18\xc3\x7c\x0b\x56\xaf\x8c\x61\x30\x7e\x86\xa7\xe7\x19\xdc\x8e\x1f\x66\xac\xd7\x0d\x43\x98\xa2\x5e\x49\x29\x64\x52\x21\x60\x23\xb2\x0c\xd4\x1a\xf5\x46\x0b\x8b\x60\x53\x61\x60\x21\x32\xac\xd0\x3f\x50\x1b\xa1\xe4\x35\x94\x25\xf3\xbf\x77\xbb\xf6\x0e\x8c\xb9\xc5\xf6\x36\x3d\x13\xa4\xd7\x2d\x78\xb4\xe4\x89\x4b\x8b\x1e\xc3\x10\x66\x35\x39\x14\x5a\xad\x45\x8c\x06\x0c\xea\x35\xea\x2b\x23\x62\x84\xb9\x90\xb1\x90\x89\x81\x85\xd2\x60\x53\x84\x64\x3a\x19\x81\xd5\x5c\x9a\x42\x69\x5b\x65\xf4\x60\x61\x65\x45\x26\xfe\x41\xe3\x30\xcd\x76\x98\xe8\x22\x62\x7f\x39\x3e\x46\x01\x45\x4e\xcb\x30\xe8\x75\x3b\x7d\x89\x36\x4c\xad\x2d\xfa\xf4\x10\x29\x69\xf1\xd5\xf6\x09\xd4\xe9\x27\x4a\x25\x19\xb2\x44\x65\x5c\x26\x4c\xe9\xc4\x11\x85\x39\x5a\x1e\x73\xcb\x2b\x14\x2d\x35\x91\xa0\x9f\x08\x9b\xae\xe6\x2c\x52\x79\x98\xa8\xab\xa5\xb0\x21\xfd\x1d\xa6\xe2\x42\xb5\x80\x63\xf5\x84\x1b\x43\x42\x85\x91\xd2\xf4\x4f\x5a\xcd\x23\x9f\x46\xdd\x1d\xca\x5f\x44\xd8\xeb\x76\x8a\x39\xf4\xcb\x92\x4d\xbe\x3c\xb8\x3a\x26\xdc\xa6\x70\xb5\xdb\xf5\x7b\xdd\xc0\xb7\xf3\x91\x2f\xf1\x6e\x3a\x19\x55\x35\x43\xce\x97\x68\x80\x83\x41\x0b\x6a\x01\x28\xe3\x42\x09\x69\x0d\xf0\x35\x17\x19\x9f\x67\x08\x9c\xf6\x5d\x57\xcb\x92\xf9\x50\xec\x89\xe7\xb8\xdb\x35\x8d\x5b\xac\x64\xf4\x86\x7a\xb0\xe7\xba\xad\x7f\x0d\x41\x15\x56\x28\x69\x80\x31\x76\xd0\x1e\xaf\xc1\xb3\xdb\x0e\xa0\x98\xb3\x77\x82\x41\xd9\xeb\x76\x4c\x0b\x6c\xe0\xfa\x06\x7e\xfe\x7a\x9f\x8d\x0e\x74\x4e\x6d\x7f\xc1\x85\xd2\x38\xa8\x45\x9b\xa9\x51\xa5\x71\x30\xec\x75\x3b\xbb\xa3\x30\x37\xc0\x8b\x02\x65\x3c\x38\x58\x6e\x4a\x62\x8c\x05\xbd\x6e\x47\xa3\x5d\x69\x09\xff\xa7\x80\x55\x98\xb2\x52\xaa\x2c\x61\xa6\xfe\x54\x1b\xd4\x70\x50\x18\x90\xf1\x3b\x65\xa9\xb9\x4c\x10\x3e\x09\x2a\xa7\x01\x3c\xa2\x4d\x55\x6c\x1c\xa4\x53\x96\x35\xc1\x27\xe1\x7b\x72\x0d\x87\x85\x3d\xe1\xc6\x77\x9f\x0e\x74\x1a\x09\x58\x59\x36\x67\x6a\x35\x86\x0e\x32\xc6\x48\xc5\x4e\xb6\x16\x64\x8a\x2f\x2b\x34\x1e\x71\x2b\x4f\x22\x4c\xa1\xa4\xc1\x0a\x72\xd0\x11\xc6\x98\x5b\x75\x6d\x2c\xcb\x2b\x32\x95\x2b\x60\xd7\xeb\xee\xbc\x0b\xf7\xdd\x01\x91\x17\x19\xe6\x48\x3e\xa1\xab\x59\x96\x77\xca\xb5\xe5\xb4\xfa\x42\x5a\xd4\x0b\x4e\x66\xb7\xdb\x02\xdb\x44\xc6\xea\x55\x64\xc9\x1f\x17\x34\xf3\x44\x2f\x01\xde\x34\xf3\x9e\xcb\x38\x43\x4d\x7c\x4d\x11\x75\x01\x9e\xcb\x4d\x9d\x56\x0e\x56\xed\xeb\xf9\x0f\xa5\x7c\x9c\xb0\xbb\x60\x03\x03\x9f\xf7\xc1\x82\x7d\x80\xa6\x86\x41\x64\x5f\xc1\x8f\x2a\xe6\xed\x3c\x04\x8d\x2f\xf0\xd9\x5d\xa9\x3d\xde\x4b\x3c\xdb\x16\x75\x5a\x01\x0c\x8e\x41\x95\xca\x2d\xd4\x10\x50\x6b\x45\xc1\x7b\xdd\xce\x6f\xe2\x2e\xdc\x12\x25\x4e\x36\x3b\x6a\x6b\x75\xd9\xc8\x3e\x94\x9c\x4b\x86\xee\x89\x58\xb8\x53\xff\xbb\x01\x29\x32\x47\x56\x5f\x1d\x29\x32\xc7\xe8\x2f\xa1\x5f\xd5\x58\xb0\x4b\xf2\x0b\x86\x44\xe0\x84\x2a\x4b\x2f\x9a\x53\xcc\x77\xbd\xf2\xfb\x25\x2d\x0f\x43\x38\x77\x39\x40\xd0\x5c\x7c\xf3\x26\xa9\x0e\x78\xc4\x57\xd2\xcc\xa6\xdc\x92\x22\x6b\xd4\x34\x55\x2b\xf7\x57\xc3\xf4\xd8\x81\xda\x53\x5b\x05\x1c\x56\x06\xf5\x55\xac\x72\x2e\xe4\x39\x30\x83\x89\x16\x39\xd7\x22\xdb\xd2\x91\xc5\x2a\x03\x21\xdd\x44\x6f\xcf\xe6\x73\x95\x0c\x7e\x1f\x5b\x86\xaa\x99\xe2\xcb\xde\xa4\x25\xf9\xa3\xf5\x74\xe0\x03\x32\xd8\xf5\x4d\x7d\xe8\x94\x4e\x47\x66\x6b\x2b\xfb\xf2\x81\x66\xd5\x04\xba\x50\xb3\xb3\xe3\xea\xa4\x68\xd5\x89\x1a\xf2\xae\x6a\x1f\xeb\xe1\x63\x38\xf5\xce\x68\x5c\x64\xdb\xcb\x44\x3b\x5b\xca\x29\xd5\x9a\x14\x2e\x95\xcd\x14\xd4\xc9\xfa\xd8\x65\x17\xac\xad\x9c\x29\xde\x93\xee\x1e\xb3\x02\xb5\xa1\x27\x57\xcb\xd1\x5b\xf6\xf4\xa8\xca\xe3\x06\xc9\x1e\xc7\xc1\x5b\x80\x4b\x9b\x66\xee\x72\x08\x6b\x97\xba\x33\x44\x1e\x57\x13\x44\x2c\x60\x7d\x30\x52\xaa\x4f\x24\x84\x25\x6e\x9d\xf4\x71\x4c\x1f\xba\xca\xa6\xd4\xee\x3a\x10\x0d\xf1\x9c\x5b\x18\x2c\x03\xd8\xa4\x22\x4a\x1d\x34\xcb\x20\x23\xe9\x6a\x1a\x2e\x63\xf7\x82\xa2\x2f\x42\x36\xe2\x52\x49\x11\xf1\xec\x1e\x79\x8c\xfa\x1b\x6e\xe9\xeb\xc9\xfa\x48\x46\x55\x06\x12\x16\x22\x2e\x61\x8e\x0d\x47\x14\xa1\x31\x18\x53\x74\x14\x36\x45\xed\x63\x3b\x00\x35\xe4\xa6\xa9\xf8\x6f\x61\xd3\x1f\x3c\x5b\x61\x35\x36\xa9\xe0\x9f\x7f\xfc\x0a\x3e\x46\xbe\x93\xe0\x60\x19\xb4\x28\xfc\xfb\xb8\xd7\x05\x38\x4b\x56\x7f\x70\xd6\x57\xf8\xbb\xce\xbe\xe1\x96\x74\x62\x77\x68\x07\xfd\xeb\x82\xdb\xb4\x1f\x54\xb4\x97\x72\xcd\xea\xfb\xe7\xa8\xfa\x77\x93\xe9\x68\x32\x7d\x9e\x3d\x7f\xf9\xfe\xb5\xdf\xb2\x57\x64\x5f\x9d\xb1\xfe\x0d\x00\x00\xff\xff\x07\xc7\xe0\x67\xab\x0c\x00\x00")

func genTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_grpcGotemplate,
		"gen/transport_grpc.gotemplate",
	)
}

func genTransport_grpcGotemplate() (*asset, error) {
	bytes, err := genTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_grpc.gotemplate", size: 3243, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xd7, 0xa4, 0x94, 0xbf, 0x2e, 0x70, 0xff, 0xc9, 0xe9, 0xbb, 0x60, 0x75, 0x95, 0xaf, 0x97, 0x9f, 0xd6, 0xab, 0x36, 0x3e, 0x9d, 0xf9, 0xc5, 0xff, 0x22, 0xb3, 0x13, 0x98, 0x5d, 0x41, 0x7e}}
	return a, nil
}

var _genTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func genTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_httpGotemplate,
		"gen/transport_http.gotemplate",
	)
}

func genTransport_httpGotemplate() (*asset, error) {
	bytes, err := genTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

var _serviceGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func serviceGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceGotemplate,
		"service.gotemplate",
	)
}

func serviceGotemplate() (*asset, error) {
	bytes, err := serviceGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/client/grpc/client.gotemplate": genClientGrpcClientGotemplate,
	"gen/client/http/client.gotemplate": genClientHttpClientGotemplate,
	"gen/endpoints.gotemplate":          genEndpointsGotemplate,
	"gen/transport_grpc.gotemplate":     genTransport_grpcGotemplate,
	"gen/transport_http.gotemplate":     genTransport_httpGotemplate,
	"service.gotemplate":                serviceGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gen": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {genClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {genClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": {genEndpointsGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": {genTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {genTransport_httpGotemplate, map[string]*bintree{}},
	}},
	"service.gotemplate": {serviceGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
